library(readr)
library(dplyr)
library(tidytext)
library(Matrix)
library(ggplot2)
rm(list = ls())
ruta <- 'C:/Users/Alex Isasi/Documents/GitHub/EvaluacionCognitiva/cuenta_de_palabras/Prueba t de cuenta de palabras/Hombres vs Mujeres_PRIMARIA/'
datos <- read.csv(paste0(ruta,'PRIM_HOM_MUJ_PALABRAS.csv'))
View(datos)
library(readr)
library(dplyr)
library(tidytext)
library(Matrix)
library(ggplot2)
rm(list = ls())
ruta <- 'C:/Users/Alex Isasi/Documents/GitHub/EvaluacionCognitiva/cuenta_de_palabras/Prueba t de cuenta de palabras/Hombres vs Mujeres_PRIMARIA/'
datos <- read.csv(paste0(ruta,'PRIM_HOM_MUJ_PALABRAS.csv'))
View(datos)
png(paste0(ruta,'grafica_densidad.png'))
ggplot(datos, aes(suma_total, fill = grado, color = grado))+
geom_density(alpha=0.2)+
xlim(2,400)
dev.off()
png(paste0(ruta,'grafica_qq_normalidad.png'))
qqnorm(datos$suma_total)
qqline(datos$suma_total, col="blue")
dev.off()
sink(paste0(ruta,'test_shapiro_normalidad.txt'))
print(shapiro.test(datos$suma_total))
sink()
png(paste0(ruta,'grafica_boxplot.png'))
ggplot(datos, aes(grado, suma_total, fill = grado, color = grado))+
geom_boxplot(alpha=0.4)+
theme(legend.position = "none")
dev.off()
sink(paste0(ruta,'resumen_general.txt'))
print(summary(datos$suma_total))
sink()
sink(paste0(ruta,'test_de_varianza.txt'))
print(var.test(suma_total ~ grado, data = datos))
sink()
sink(paste0(ruta, 't_test.txt'))
print(t.test(suma_total ~ grado, data = datos, var.equal = T))
sink()
library(readr)
library(dplyr)
library(tidytext)
library(Matrix)
library(ggplot2)
rm(list = ls())
ruta <- 'C:/Users/Alex Isasi/Documents/GitHub/EvaluacionCognitiva/cuenta_de_palabras/Prueba t de cuenta de palabras/Hombres vs Mujeres_PRIMARIA/'
datos <- read.csv(paste0(ruta,'PRIM_HOM_MUJ_PALABRAS.csv'))
View(datos)
png(paste0(ruta,'grafica_densidad.png'))
ggplot(datos, aes(suma_total, fill = grado, color = grado))+
geom_density(alpha=0.2)+
xlim(2,400)
dev.off()
library(readr)
library(dplyr)
library(tidytext)
library(Matrix)
library(ggplot2)
rm(list = ls())
ruta <- 'C:/Users/Alex Isasi/Documents/GitHub/EvaluacionCognitiva/cuenta_de_palabras/Prueba t de cuenta de palabras/Hombres vs Mujeres_PRIMARIA/'
datos <- read.csv(paste0(ruta,'PRIM_HOM_MUJ_PALABRAS.csv'))
View(datos)
png(paste0(ruta,'grafica_densidad.png'))
ggplot(datos, aes(suma_total, fill = genero, color = genero))+
geom_density(alpha=0.2)+
xlim(2,400)
dev.off()
png(paste0(ruta,'grafica_qq_normalidad.png'))
qqnorm(datos$suma_total)
qqline(datos$suma_total, col="blue")
dev.off()
sink(paste0(ruta,'test_shapiro_normalidad.txt'))
print(shapiro.test(datos$suma_total))
sink()
png(paste0(ruta,'grafica_boxplot.png'))
ggplot(datos, aes(genero, suma_total, fill = genero, color = genero))+
geom_boxplot(alpha=0.4)+
theme(legend.position = "none")
dev.off()
sink(paste0(ruta,'resumen_general.txt'))
print(summary(datos$suma_total))
sink()
sink(paste0(ruta,'test_de_varianza.txt'))
print(var.test(suma_total ~ genero, data = datos))
sink()
sink(paste0(ruta, 't_test.txt'))
print(t.test(suma_total ~ genero, data = datos, var.equal = T))
sink()
library(readr)
library(dplyr)
library(tidytext)
library(Matrix)
library(ggplot2)
rm(list = ls())
ruta <- 'C:/Users/Alex Isasi/Documents/GitHub/EvaluacionCognitiva/cuenta_de_palabras/Prueba t de cuenta de palabras/Hombres vs Mujeres_SECUNDARIA/'
datos <- read.csv(paste0(ruta,'SECU_HOM_MUJ_PALABRAS.csv'))
View(datos)
png(paste0(ruta,'grafica_densidad.png'))
ggplot(datos, aes(suma_total, fill = genero, color = genero))+
geom_density(alpha=0.2)+
xlim(2,400)
dev.off()
png(paste0(ruta,'grafica_qq_normalidad.png'))
qqnorm(datos$suma_total)
qqline(datos$suma_total, col="blue")
dev.off()
sink(paste0(ruta,'test_shapiro_normalidad.txt'))
print(shapiro.test(datos$suma_total))
sink()
png(paste0(ruta,'grafica_boxplot.png'))
ggplot(datos, aes(genero, suma_total, fill = genero, color = genero))+
geom_boxplot(alpha=0.4)+
theme(legend.position = "none")
dev.off()
sink(paste0(ruta,'resumen_general.txt'))
print(summary(datos$suma_total))
sink()
sink(paste0(ruta,'test_de_varianza.txt'))
print(var.test(suma_total ~ genero, data = datos))
sink()
sink(paste0(ruta, 't_test.txt'))
print(t.test(suma_total ~ genero, data = datos, var.equal = T))
sink()
library(readr)
library(dplyr)
library(tidytext)
library(Matrix)
library(ggplot2)
rm(list = ls())
ruta <- 'C:/Users/Alex Isasi/Documents/GitHub/EvaluacionCognitiva/cuenta_de_palabras/Prueba t de cuenta de palabras/Hombres vs Mujeres_SECUNDARIA/'
datos <- read.csv(paste0(ruta,'SECU_HOM_MUJ_PALABRAS.csv'))
View(datos)
png(paste0(ruta,'grafica_densidad.png'), width = 600, height = 600, units = "px")
ggplot(datos, aes(suma_total, fill = genero, color = genero))+
geom_density(alpha=0.2)+
xlim(2,400)
dev.off()
library(readr)
library(dplyr)
library(tidytext)
library(Matrix)
library(ggplot2)
rm(list = ls())
ruta <- 'C:/Users/Alex Isasi/Documents/GitHub/EvaluacionCognitiva/cuenta_de_palabras/Prueba t de cuenta de palabras/Hombres vs Mujeres_SECUNDARIA/'
datos <- read.csv(paste0(ruta,'SECU_HOM_MUJ_PALABRAS.csv'))
View(datos)
png(paste0(ruta,'grafica_densidad.png'), width = 770, height = 770, units = "px")
ggplot(datos, aes(suma_total, fill = genero, color = genero))+
geom_density(alpha=0.2)+
xlim(2,400)
dev.off()
library(readr)
library(dplyr)
library(tidytext)
library(Matrix)
library(ggplot2)
rm(list = ls())
ruta <- 'C:/Users/Alex Isasi/Documents/GitHub/EvaluacionCognitiva/cuenta_de_palabras/Prueba t de cuenta de palabras/Hombres vs Mujeres_SECUNDARIA/'
datos <- read.csv(paste0(ruta,'SECU_HOM_MUJ_PALABRAS.csv'))
View(datos)
png(paste0(ruta,'grafica_densidad.png'), width = 770, height = 770, units = "px")
ggplot(datos, aes(suma_total, genero, fill = genero, color = genero))+
geom_density(alpha=0.2)+
xlim(2,400)
dev.off()
library(readr)
library(dplyr)
library(tidytext)
library(Matrix)
library(ggplot2)
rm(list = ls())
ruta <- 'C:/Users/Alex Isasi/Documents/GitHub/EvaluacionCognitiva/cuenta_de_palabras/Prueba t de cuenta de palabras/Hombres vs Mujeres_SECUNDARIA/'
datos <- read.csv(paste0(ruta,'SECU_HOM_MUJ_PALABRAS.csv'))
View(datos)
png(paste0(ruta,'grafica_densidad.png'), width = 770, height = 770, units = "px")
ggplot(datos, aes(suma_total, fill = genero, color = genero))+
geom_density(alpha=0.1)+
xlim(2,400)
dev.off()
library(readr)
library(dplyr)
library(tidytext)
library(Matrix)
library(ggplot2)
rm(list = ls())
ruta <- 'C:/Users/Alex Isasi/Documents/GitHub/EvaluacionCognitiva/cuenta_de_palabras/Prueba t de cuenta de palabras/Hombres vs Mujeres_SECUNDARIA/'
datos <- read.csv(paste0(ruta,'SECU_HOM_MUJ_PALABRAS.csv'))
View(datos)
png(paste0(ruta,'grafica_densidad.png'), width = 770, height = 770, units = "px")
ggplot(datos, aes(suma_total, fill = genero, color = genero))+
geom_density(alpha=0.3)+
xlim(2,400)
dev.off()
library(readr)
library(dplyr)
library(tidytext)
library(Matrix)
library(ggplot2)
rm(list = ls())
ruta <- 'C:/Users/Alex Isasi/Documents/GitHub/EvaluacionCognitiva/cuenta_de_palabras/Prueba t de cuenta de palabras/Hombres vs Mujeres_SECUNDARIA/'
datos <- read.csv(paste0(ruta,'SECU_HOM_MUJ_PALABRAS.csv'))
View(datos)
png(paste0(ruta,'grafica_densidad.png'), width = 800, height = 800, units = "px")
ggplot(datos, aes(suma_total, fill = genero, color = genero))+
geom_density(alpha=0.5)+
xlim(2,400)
dev.off()
library(readr)
library(dplyr)
library(tidytext)
library(Matrix)
library(ggplot2)
rm(list = ls())
ruta <- 'C:/Users/Alex Isasi/Documents/GitHub/EvaluacionCognitiva/cuenta_de_palabras/Prueba t de cuenta de palabras/Hombres vs Mujeres_SECUNDARIA/'
datos <- read.csv(paste0(ruta,'SECU_HOM_MUJ_PALABRAS.csv'))
View(datos)
png(paste0(ruta,'grafica_densidad.png'), width = 800, height = 800, units = "px")
ggplot(datos, aes(suma_total, fill = genero, color = genero))+
geom_density(alpha=0.2)+
xlim(2,400)
dev.off()
library(ggplot2)
df <- data.frame(dose=c("D0.5", "D1", "D2", "D3", "D4", "D5", "D6", "D7", "D8", "D9"),
len=c(4.2, 10, 29.5, 15, 12.3, 15.4, 14.7, 16, 14.1, 18 ))
summary(df)
p<-ggplot(data=df, aes(x=dose, y=len)) +
geom_bar(stat="identity")
p
library(ggplot2)
df <- data.frame(dose=c("D0.5", "D1", "D2", "D3", "D4", "D5", "D6", "D7", "D8", "D9"),
len=c(4.2, 10, 29.5, 15, 12.3, 15.4, 14.7, 16, 14.1, 18 ))
summary(df)
p<-ggplot(data=df, aes(x=dose, y=len)) +
geom_bar(stat="identity")
p
# Change the width of bars
ggplot(data=df, aes(x=dose, y=len)) +
geom_bar(stat="identity", width=0.5)
# Change colors
ggplot(data=df, aes(x=dose, y=len)) +
geom_bar(stat="identity", color="blue", fill="white")
# Minimal theme + blue fill color
p<-ggplot(data=df, aes(x=dose, y=len)) +
geom_bar(stat="identity", fill="steelblue")+
theme_minimal()
p
s
c
c$name
library(ggplot2)
library(dplyr)
library(tidyr)
library(moments)
library(nortest)
library(lawstat)
head(diamonds)
ggplot(diamonds, aes(x = carat)) + geom_histogram()
nrow(diamonds)
max(diamonds$carat, na.rm = T)
tail(names(sort(table(diamonds$carat))),1)
ggplot(diamonds, aes(x = carat)) + geom_histogram(binwidth = 0.01)
ggplot(diamonds, aes(carat, fill = cut)) + geom_histogram(binwidth = 0.01)
ggplot(diamonds, aes(carat, fill = cut)) + geom_histogram()
ggplot(diamonds, aes(carat, fill = cut)) + geom_histogram() + ggtitle("Quilates de diamantes por cortes")
ggplot(diamonds, aes(carat, fill = cut)) + geom_histogram() + ggtitle("Quilates de diamantes por cortes") + labs(x = 'Frecuencia de quilátes', y = 'quilátes')
install.packages("ggthemes")
library(help = 'datasets')
library(ggplot2)
install.packages('ggplot2')
install.packages('dplyr')
library(moments)
library(nortest)
install.packages('moments')
install.packages('nortest')
install.packages('lawstat')
install.packages('ggthemes')
rm(list = ls())
rm(list = ls())
library(ggplot2)
library(dplyr)
library(tidyr)
library(moments)
library(nortest)
library(lawstat)
library(reshape2)
library(ggthemes)
#ggplot(mtcars, aes(cyl, mpg)) + geom_boxplot()
#ggplot(mtcars, aes(as.factor(cyl), mpg)) +
#  geom_boxplot() +
#    geom_point() +
#        labs(title = "GrÃ¡fica de caja de ejemplo", x = "No. de cilindros", y = "Millas por galÃ³n") +
#          scale_color_brewer("Diamond\nClarity")
View(mtcars)
rm(list = ls())
library(ggplot2)
library(dplyr)
library(tidyr)
library(moments)
library(nortest)
library(lawstat)
library(reshape2)
library(ggthemes)
#ggplot(mtcars, aes(cyl, mpg)) + geom_boxplot()
#ggplot(mtcars, aes(as.factor(cyl), mpg)) +
#  geom_boxplot() +
#    geom_point() +
#        labs(title = "GrÃ¡fica de caja de ejemplo", x = "No. de cilindros", y = "Millas por galÃ³n") +
#          scale_color_brewer("Diamond\nClarity")
View(mtcars)
wilcox.test(mpg ~ am, data = mtcars)
install.packages('asht')
load("C:/Users/Alex Isasi/Documents/analisis_conteo_palabras/analisis_conteo_alejandro/.RData")
ddata
data
#Testing v2.0
#Este script calcula con base los datos que sean ingresados y lo que se desee las siguientes pruebas estadísticas:
#Para normalidad. Jarque test, Anderson test, kolmogorov, pearson, shapiro-francia, shapiro-wilk
#Para homogeneidad de varianzas. Bartlett test, Levene test
#Para diferencia de varianzas(dependiendo de los datos ingresados Wilcox test/U de Mann Whitney, kruskal wallis, Friedman test
#Borrado de variables existentes
rm(list = ls())
#Librerias
library(ggplot2)
library(stats)
library(dplyr)
library(tidyr)
library(moments)
library(nortest)
library(lawstat)
library(ggthemes)
library(FSA)
get_names <- function(type) { #Función que retorna la columna con tipos de test deseados dependiendo del tipo que ingrese a la función
vec_tot_of_names <- c()
if(type == 'normalidad'){ test_names <- list('jarque','anderson', 'kolmogorov', 'pearson', 'shapfran', 'shapwilk')}
if (type == 'homogeneidad') { test_names <- list('bartlett', 'levene')} #levene
if (type == 'diferencias') { test_names <- list('kruskal')} #wilcox, kruskal, friedman
for(t in test_names){
vec_of_names <- paste0(t, c('_estadistico', '_pvalor', '_conclusion'))
vec_tot_of_names <- c(vec_tot_of_names, vec_of_names)
}
return(vec_tot_of_names)
}
#Función que organiza dataframes en directorios y los guarda como CSV's
organizer <- function(list_dataframes, type = 'diferencias'){
x = 1
for(df in list_dataframes){
if(!dir.exists(type)){
dir.create(type)
}
setwd(type)
write.csv(df, file = paste0(names(list_dataframes[x]),'.csv')) #ejemplo: normalidad_todo, diferencias_ph_vs_pm.csv
x = x + 1
setwd(first_link)
}
}
#Función que retorna la columna de resultados dependiendo de la columna analizada y el test ejecutado
get_column <- function(list_of_tests){
column <- c()
for(test in list_of_tests){
new_data <- c(test$statistic, test$p.value, get_conclusion(test$p.value))
column <- c(column, new_data)
}
return(column)
}
#Agregar a esta función el tiepo de test para que devuelva cadena dependiendo del tipo
get_conclusion <- function(pvalor){
if(pvalor <= 0.05){
return('Rechaza la hipótesis nula')
} else{
return('No rechaza la hipotesis nula')
}
}
#Función que grafica diferencias por cada subdf con boxplots
get_plot <- function(subdf, gp, i){
rango <- max(subdf[i], na.rm = T)
column = names(subdf)
themes = c("PuBu", "GnBu", "OrRd", "YlGn", "PuRd", "BuPu", "Dark2", "YlOrBr")
#View(subdf)
print(gp)
#print(subdf[1, divider])
print(column[i])
#ggtitle(paste0("Diferencias entre: ", gp,". De: ", column[i],". En: ",divider, ": ", subdf[1, divider])) +
#ggsave(paste0("boxplot_por_",gp,"_",column[i],"_en_",divider,"_",subdf[1, divider],".jpeg"))
pl <- ggplot(subdf, aes_string(x=gp, y=column[i], group=gp, fill = as.factor(gp))) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.1)) +
scale_y_continuous(breaks = seq(0,rango,2)) +
scale_fill_brewer(palette = sample(themes,1)) +
ggtitle(paste0("Diferencias entre: ", gp,". De: ", column[i])) +
labs(x = "Evaluaciones", y = "Frecuencia") +
ggsave("boxplot de prueba.jpg")
#print(pl)
quit(save="default", status = 0, runLast = TRUE)
}
testing_homogeneity <- function(variable, group){
column <- c()
list_of_tests <- list(bartlett.test(variable~group), #bartlett
levene.test(variable, group)) #levene
col <- get_column(list_of_tests)
return(col)
}
testing_difference <- function(variable, group, sub){
list_of_tests <- list(kruskal.test(variable ~ group)) #wilcox
column <- get_column(list_of_tests)
return(column)
}
testing_normality <- function(variable){
list_of_tests <- list(jarque.test(variable), #jarque
ad.test(variable),     #anderson
lillie.test(variable), #kolmogorov
pearson.test(variable), #pearson
sf.test(variable),     #shapiro-francia
shapiro.test(variable)) #shapiro-wilk
col <- get_column(list_of_tests)
return(col)
}
dunn <- function(num_col_df){
print(num_col_df)
dunnT <- dunnTest(as.vector(unlist(data[num_col_df])), as.factor(data$b_puntaje))
print(dunnT)
dunnT_as_df <- as.matrix.data.frame(dunnT$res)
write.csv(dunnT_as_df, file = paste0(names(data)[num_col_df], '_dunn.csv'))
}
Testing <- function(){
for(i in cols_to_analyze){
var_cols <- as.vector(unlist(data[i]))
group <- as.vector(unlist(data["b_puntaje"]))
dunn(i)
#new_col_norm <- testing_normality(var_cols)
#df_normalidad <- cbind(df_normalidad, new_col_norm)
#new_col_homo <- testing_homogeneity(var_cols, group)
#df_homogeneidad <- cbind(df_homogeneidad, new_col_homo)
new_col_diff <- testing_difference(var_cols, group)
df_diferencias_1 <- cbind(df_diferencias_1, new_col_diff)
print(df_diferencias_1)
#get_plot(data, grupo, i)
#sub = 1
#for(subdf in subdfs){ #itera por cada columna
#  get_plot(subdf, grupo, i)
#  var_cols <- as.vector(unlist(subdf[i]))
#  group <- as.vector(unlist(subdf[grupo]))
#  new_col_diff <- testing_difference(var_cols, group, sub)
#  if(sub == 1){ #para el primer subdf
#    df_diferencias_1 <- cbind(df_diferencias_1, new_col_diff)
#  } else if(sub == 2){ #para el segundo subdf
#    df_diferencias_2 <- cbind(df_diferencias_2, new_col_diff)
#  }
#  sub = sub + 1
#}
}
#print(df_normalidad)
#names(df_normalidad)[2:7] <- names(data)[cols_to_analyze]
#names(df_homogeneidad)[2:8] <- names(data)[cols_to_analyze]
names(df_diferencias_1)[2:6] <- names(data)[cols_to_analyze]
#names(df_diferencias_2)[2:8] <- names(data)[cols_to_analyze]
list_of_dataframes <- list(df_diferencias_1 = df_diferencias_1) #df_normalidad, df_homogeneidad df_diferencias_2
organizer(list_of_dataframes)
}
#Main
setwd('C:\\Users\\Alex Isasi\\Documents\\analisis_conteo_palabras\\analisis_conteo_alejandro') #carpeta de trabajo
data = read.csv('resultados_W2V_de_pelos.csv', na.strings = c("", "NA")) #Ingresar csv con muestras #conteo_clasif_ps_hm_mod.csv
#df_normalidad <- data.frame(tests = get_names('normalidad')) #dataframe de normalidad
#df_homogeneidad <- data.frame(tests = get_names('homogeneidad')) #dataframe de homogeneidad de varianzas
df_diferencias_1 <- data.frame(tests = get_names('diferencias')) #dataframe 1 de diferencia de varianzas
#df_diferencias_2 <- data.frame(tests = get_names('diferencias')) #dataframe 2 de diferencia de varianzas
first_link <- paste0(getwd(),'/tests_mario_de_pelos') #creación de primer carpeta
if(!dir.exists(first_link)){
dir.create(first_link)
}
setwd(first_link)
cols_to_analyze <- 3:7 #Seleccionar columnas a tomar en cuenta como variables
#datos para diferencia de varianzas
#divider = "sexo"
#grupo = "a_puntaje" #Grupo para dividir dataframes y boxplots
#subdfs <- split(data, as.factor(as.vector(unlist(data[divider])))) #con base a... hacer la división para kruskal
Testing()
data
library(ggthemes)
rango <- max(data$b_n_similarity, na.rm = T)
themes = c("PuBu", "GnBu", "OrRd", "YlGn", "PuRd", "BuPu", "Dark2", "YlOrBr")
ggplot(data, aes(x=a_puntaje, y = a_n_similarity, group=a_puntaje, fill=as.factor(a_puntaje))) +
geom_boxplot() +
geom_jitter(shape=16, position = position_jitter(0.1)) +
scale_y_continuous(breaks = seq(0, rango, 0.2)) +
scale_fill_brewer(palette = sample(themes,1)) +
ggtitle("Diferencias con a_n_similarities") +
labs(x = "Evaluaciones", y = "Frecuencias")
library(ggthemes)
rango <- max(data$b_n_similarity, na.rm = T)
themes = c("PuBu", "GnBu", "OrRd", "YlGn", "PuRd", "BuPu", "Dark2", "YlOrBr")
ggplot(data, aes(x=b_puntaje, y = b_n_similarity, group=b_puntaje, fill=as.factor(b_puntaje))) +
geom_boxplot() +
geom_jitter(shape=16, position = position_jitter(0.1)) +
scale_y_continuous(breaks = seq(0, rango, 0.2)) +
scale_fill_brewer(palette = sample(themes,1)) +
ggtitle("Diferencias con a_n_similarities") +
labs(x = "Evaluaciones", y = "Frecuencias")
library(ggthemes)
rango <- max(data$b_n_similarity, na.rm = T)
themes = c("PuBu", "GnBu", "OrRd", "YlGn", "PuRd", "BuPu", "Dark2", "YlOrBr")
ggplot(data, aes(x=b_puntaje, y = b_n_similarity, group=b_puntaje, fill=as.factor(b_puntaje))) +
geom_boxplot() +
geom_jitter(shape=16, position = position_jitter(0.1)) +
scale_y_continuous(breaks = seq(0, rango, 0.2)) +
scale_fill_brewer(palette = sample(themes,1)) +
ggtitle("Diferencias con b_n_similarities") +
labs(x = "Evaluaciones", y = "Frecuencias")
