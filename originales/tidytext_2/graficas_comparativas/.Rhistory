setwd("/media/pinker/KINGSTON/r_2018")
#Re##
?`base-package`
?base
library(help = "base")
x <- matrix(1:12, ncol = 3)
apply (x,1,sum)
apply (x,1,max)
x <- round (matrix(rnorm(24, mean=10,5), ncol =4))
x
apply (x,1,median)
apply(x,1,sd)
apply(x,1,var)
cbind(x,y)
y<-apply(x,1,var)
cbind(x,y)
y<- round(apply(x,1,mean),2)
x<-cbind(x,y)
x<-cbind(x,y)
x
w <- apply(x,2,sum)
w
w2 <-rbind(x,w)
w2
type(w2)
class(w2)
colMeans(x)
colSums(x)
ls()
rm(list=ls())
#dir()
dir()
getwd()
x<-runif(30,min=20,max=55)
rm(list=ls())
x<-runif(30,min=20,max=55)
plot(x,y)
y<-rnorm(30,mean=55, sd=15)
plot(x,y)
res <-lm (y ~ x)
abline(res)
print(res)
a<-list(1:100, matrix(1,12, ncol=3))
b<-a[[2]]
class(b)
a<-list(1:100, matrix(1:2, ncol=3))
a[[1]]
a[[2]]
a<-list(1:100, matrix(1:12, ncol=3))
a[[2]]
a[[3]]
a<-list(1:100, matrix(1:12, ncol=3))
a[[2]][2,2]]
a[[2]][2,2]
class(res)
names(res)
res$coefficients
print(summary(res))
coe <-res$coefficients
print <-coe
print <-coe
print (coe)
coe[1]
coe[2]
y2 = coe [1]*x2 + coe[2]
x2 = x[1]
y2 = coe [1]*x2 + coe[2]
points(c(x1,y1)), c(y1,y2, type='l', col='red')
points(c(x1,y1), c(y1,y2, type='l', col='red')
points (c(x1,y1), c(y1,y2, type='l', col='red')
points (c(x1,y1), c(y1,y2), type='l', col='red')
x1 =x[1]
y1 =y[1]
x2 = x[1]
y2 = coe [1] + coe[2]
points (c(x1,y1), c(y1,y2), type='l', col='red')
y2 = coe [1] + coe[2]*x2
points (c(x1,y1), c(y1,y2), type='l', col='red')
points (c(x1,x2), c(y1,y2), type='l', col='red')
points (c(x1,x2), c(y1,y2), type='l', col='red')
points (c(x1,x2), c(y1,y2), type='l', col='red')
x1 =x[1]
y1 =y[1]
x2 = x[1]
y2 = coe[1] + coe[2]*x2
points (c(x1,x2), c(y1,y2), type='l', col='red')
for(i in 1:30){
x1 = x[i]
y1 = y[i]
x2 = x[i]
y2 = coe[1] + coe[2]*x2
points(c(x1,x2), c(y1,y2), type='l', col='red')
}
x<-runif(30,min=20,max=55)
y<-rnorm(30,mean=55, sd=15)
plot(x,y)
x1 =x[1]
y1 =y[1]
x2 = x[1]
y2 = coe[1] + coe[2]*x2
points (c(x1,x2), c(y1,y2), type='l', col='red')
res <-lm (y ~ x)
abline(res)
x<-runif(30,min=20,max=55)
y<-rnorm(30,mean=55, sd=15)
plot(x,y)
#con esto hago la funcion de la regresion lineal (pongo una linea en la grafica de puntos)
res <-lm (y ~ x)
abline(res)
x1 =x[1]
y1 =y[1]
x2 = x[1]
y2 = coe[1] + coe[2]*x2
points (c(x1,x2), c(y1,y2), type='l', col='red')
for(i in 1:30){
x1 = x[i]
y1 = y[i]
x2 = x[i]
y2 = coe[1] + coe[2]*x2
points(c(x1,x2), c(y1,y2), type='l', col='red')
}
text(45,30 'R-squared:0.1213')
text(45,30, 'R-squared:0.1213')
text(45,30, 'R-squared:0.1213', cex=2)
x<-runif(30,min=20,max=55)
y<-rnorm(30,mean=55, sd=15)
plot(x,y)
#con esto hago la funcion de la regresion lineal (pongo una linea en la grafica de puntos)
res <-lm (y ~ x)
abline(res)
for(i in 1:30){
x1 = x[i]
y1 = y[i]
x2 = x[i]
y2 = coe[1] + coe[2]*x2
points(c(x1,x2), c(y1,y2), type='l', col='red')
}
text(45,30, 'R-squared:0.1213', cex=2)
points(c(x1,x2), c(y1,y2), type='l', col='red')
text(45,30, 'R-squared:0.1213', cex=2)
x = rnorm(30)
x
plot (x)
y=(-10,10,.1)
y<- dnorm(x)
y =(-10,10,.1)
y<- dnorm(x)
y = (-10,10,.1)
y<- dnorm(x)
pob <-round(runif(100, min=18, max=65))
media_muestras <- rep(0,30)
for (i in 1:30){
muestra <- sample(pob,10)
media_muestras[i] <- mean(muestra)
}
hist (media_muestras)
print(shapiro.test(media_muestras))
print(paste('mean poblacion:', mean(pob)))
x<-seq(-10,10,.1)
y<-dnorm(x,y)
plot(x,y, type='l')
plot(x,y, type='l')
plot(x,y, type='l')
x<-seq(-10,10,.1)
y<-dnorm(x)
plot(x,y, type='l')
x<-seq(-10,10,.1)
y<-dnorm(x)
plot(x,y, type='l')
x <-round(runif(20,min=20, max = 30))
tabla <- table(x)
print(tabla)
frec <- as.vector(tabla)
print(frec)
frec <- as.vector(tabla)
print(frec)
frec_rel <- frec /sum(frec)
print(frec_rel)
print(acumsum(frec))
print(cumsum(frec))
print(cumsum(frec_rel))
install.packages("tidyverse")
library(tidyverse)
devtools::install_github("hadley/tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("devtools")
devtools::install_github("hadley/tidyverse")
rm(list = ls())
plot()
matrix(x, ncol = 5, byrow = F)
as.matrix(mtcars)
plot (mtcars)
#A diferencia de las matrices, los dataframes pueden tener diferentes tipos de variables
midataframe <- as.data.frame(mtcars)
#A diferencia de las matrices, los dataframes pueden tener diferentes tipos de variables
midataframe <- as.data.frame(mtcars)
midataframe <- as.data.frame(mtcars)
matriz1 <-as.matrix(mtcars)
#A diferencia de las matrices, los dataframes pueden tener diferentes tipos de variables
midataframe <- as.data.frame(matriz1)
midataframe <- as.data.frame(matriz1)
midataframe <- as.data.frame(matriz1)
midataframe <- as.data.frame(matriz1)
midataframe <- as.data.frame(matriz1)
midataframe <- as.data.frame(matriz1)
matriz2 <- matrix (x, ncols=5)
matriz2 <- matrix (x, ncol=5)
matriz2 <- matrix(x, ncol=5)
matriz_de_letras <- matrix(sample(letters,20), ncol = 5)
matriz_de_letras
mi.data.frame <- as.data.frame(matriz_de_letras)
mi.data.frame
str(mi.data.frame)
mi.data.frame <- as.data.frame(matriz_de_letras, stringsAsFactors = F)
str(mi.data.frame)
mi.df.manual <- data.frame(1:22, LETTERS [1:22], sample(month.name,22, replace = T))
mi.df.manual
mi.df.manual
mi.df.manual <- data.frame(id = 1:22, segmento = LETTERS [1:22], mes = sample(month.name,22, replace = T))
mi.df.manual
mi.df.manual
mispacientes <- list(
nombre = list ("Pedro", "Alejandro","Maria")
apellido = list ("Perez Najera", "Gonzalez Azpeitia", "Jimenez Prado"),
mispacientes <- list(
nombre = list ("Pedro", "Alejandro","Maria"),
apellido = list ("Perez Najera", "Gonzalez Azpeitia", "Jimenez Prado"),
edad = list (23,45,12),
respuestas = list (
list (T,T,F,T),
list (F,F,F,T),
list (F,T,F,F)
)
)
mispacientes
mispacientes
mispacientes[1]
mispacientes$apellido
mispacientes[[1]]
mispacientes$nombre
mispacientes[1]
mispacientes$glucosa <- c(132,100,90)
mispacientes$glucosa <- c(132,100,90)
mispacientes
mispacientes[5]
mispacientes[[5]]
mispacientes$glucosa
str(mispacientes[5])
str(mispacientes[[5]])
str(mispacientes$glucosa)
mispacientes$glucosa[2]
mi.df.manual[,2]
#Si se pone sin coma, extraera columna, pero como data.frame
mi.df.manual[2]
mi.df.manual[2,]
#Si se pone sin coma, extraera columna, pero como data.frame
mi.df.manual[2]
str (mi.df.manual[1,])
mi.df.manual$id
mi.df.manual["id"]
mi.data.frame[,"id"]
mi.data.frame[,"id"]
mi.data.frame[,"id"]
mi.df.manual[,"id"]
mi.df.manual[3,"id"]
mi.df.manual[,"id"][3]
getwd()
getwd()
library(qdap)
install.packages("qdap")
getwd()
getwd()
str(data5)
str(data5)
getwd()
setwd("/media/pinker/KINGSTON/tidytext_2/graficas_comparativas")
getwd()
