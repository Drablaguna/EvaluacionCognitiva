setwd("/media/pinker/KINGSTON/r_2018")
#Re##
?`base-package`
?base
library(help = "base")
x <- matrix(1:12, ncol = 3)
apply (x,1,sum)
apply (x,1,max)
x <- round (matrix(rnorm(24, mean=10,5), ncol =4))
x
apply (x,1,median)
apply(x,1,sd)
apply(x,1,var)
cbind(x,y)
y<-apply(x,1,var)
cbind(x,y)
y<- round(apply(x,1,mean),2)
x<-cbind(x,y)
x<-cbind(x,y)
x
w <- apply(x,2,sum)
w
w2 <-rbind(x,w)
w2
type(w2)
class(w2)
colMeans(x)
colSums(x)
ls()
rm(list=ls())
#dir()
dir()
getwd()
x<-runif(30,min=20,max=55)
rm(list=ls())
x<-runif(30,min=20,max=55)
plot(x,y)
y<-rnorm(30,mean=55, sd=15)
plot(x,y)
res <-lm (y ~ x)
abline(res)
print(res)
a<-list(1:100, matrix(1,12, ncol=3))
b<-a[[2]]
class(b)
a<-list(1:100, matrix(1:2, ncol=3))
a[[1]]
a[[2]]
a<-list(1:100, matrix(1:12, ncol=3))
a[[2]]
a[[3]]
a<-list(1:100, matrix(1:12, ncol=3))
a[[2]][2,2]]
a[[2]][2,2]
class(res)
names(res)
res$coefficients
print(summary(res))
coe <-res$coefficients
print <-coe
print <-coe
print (coe)
coe[1]
coe[2]
y2 = coe [1]*x2 + coe[2]
x2 = x[1]
y2 = coe [1]*x2 + coe[2]
points(c(x1,y1)), c(y1,y2, type='l', col='red')
points(c(x1,y1), c(y1,y2, type='l', col='red')
points (c(x1,y1), c(y1,y2, type='l', col='red')
points (c(x1,y1), c(y1,y2), type='l', col='red')
x1 =x[1]
y1 =y[1]
x2 = x[1]
y2 = coe [1] + coe[2]
points (c(x1,y1), c(y1,y2), type='l', col='red')
y2 = coe [1] + coe[2]*x2
points (c(x1,y1), c(y1,y2), type='l', col='red')
points (c(x1,x2), c(y1,y2), type='l', col='red')
points (c(x1,x2), c(y1,y2), type='l', col='red')
points (c(x1,x2), c(y1,y2), type='l', col='red')
x1 =x[1]
y1 =y[1]
x2 = x[1]
y2 = coe[1] + coe[2]*x2
points (c(x1,x2), c(y1,y2), type='l', col='red')
for(i in 1:30){
x1 = x[i]
y1 = y[i]
x2 = x[i]
y2 = coe[1] + coe[2]*x2
points(c(x1,x2), c(y1,y2), type='l', col='red')
}
x<-runif(30,min=20,max=55)
y<-rnorm(30,mean=55, sd=15)
plot(x,y)
x1 =x[1]
y1 =y[1]
x2 = x[1]
y2 = coe[1] + coe[2]*x2
points (c(x1,x2), c(y1,y2), type='l', col='red')
res <-lm (y ~ x)
abline(res)
x<-runif(30,min=20,max=55)
y<-rnorm(30,mean=55, sd=15)
plot(x,y)
#con esto hago la funcion de la regresion lineal (pongo una linea en la grafica de puntos)
res <-lm (y ~ x)
abline(res)
x1 =x[1]
y1 =y[1]
x2 = x[1]
y2 = coe[1] + coe[2]*x2
points (c(x1,x2), c(y1,y2), type='l', col='red')
for(i in 1:30){
x1 = x[i]
y1 = y[i]
x2 = x[i]
y2 = coe[1] + coe[2]*x2
points(c(x1,x2), c(y1,y2), type='l', col='red')
}
text(45,30 'R-squared:0.1213')
text(45,30, 'R-squared:0.1213')
text(45,30, 'R-squared:0.1213', cex=2)
x<-runif(30,min=20,max=55)
y<-rnorm(30,mean=55, sd=15)
plot(x,y)
#con esto hago la funcion de la regresion lineal (pongo una linea en la grafica de puntos)
res <-lm (y ~ x)
abline(res)
for(i in 1:30){
x1 = x[i]
y1 = y[i]
x2 = x[i]
y2 = coe[1] + coe[2]*x2
points(c(x1,x2), c(y1,y2), type='l', col='red')
}
text(45,30, 'R-squared:0.1213', cex=2)
points(c(x1,x2), c(y1,y2), type='l', col='red')
text(45,30, 'R-squared:0.1213', cex=2)
x = rnorm(30)
x
plot (x)
y=(-10,10,.1)
y<- dnorm(x)
y =(-10,10,.1)
y<- dnorm(x)
y = (-10,10,.1)
y<- dnorm(x)
pob <-round(runif(100, min=18, max=65))
media_muestras <- rep(0,30)
for (i in 1:30){
muestra <- sample(pob,10)
media_muestras[i] <- mean(muestra)
}
hist (media_muestras)
print(shapiro.test(media_muestras))
print(paste('mean poblacion:', mean(pob)))
x<-seq(-10,10,.1)
y<-dnorm(x,y)
plot(x,y, type='l')
plot(x,y, type='l')
plot(x,y, type='l')
x<-seq(-10,10,.1)
y<-dnorm(x)
plot(x,y, type='l')
x<-seq(-10,10,.1)
y<-dnorm(x)
plot(x,y, type='l')
x <-round(runif(20,min=20, max = 30))
tabla <- table(x)
print(tabla)
frec <- as.vector(tabla)
print(frec)
frec <- as.vector(tabla)
print(frec)
frec_rel <- frec /sum(frec)
print(frec_rel)
print(acumsum(frec))
print(cumsum(frec))
print(cumsum(frec_rel))
install.packages("tidyverse")
library(tidyverse)
devtools::install_github("hadley/tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("devtools")
devtools::install_github("hadley/tidyverse")
rm(list = ls())
plot()
matrix(x, ncol = 5, byrow = F)
as.matrix(mtcars)
plot (mtcars)
#A diferencia de las matrices, los dataframes pueden tener diferentes tipos de variables
midataframe <- as.data.frame(mtcars)
#A diferencia de las matrices, los dataframes pueden tener diferentes tipos de variables
midataframe <- as.data.frame(mtcars)
midataframe <- as.data.frame(mtcars)
matriz1 <-as.matrix(mtcars)
#A diferencia de las matrices, los dataframes pueden tener diferentes tipos de variables
midataframe <- as.data.frame(matriz1)
midataframe <- as.data.frame(matriz1)
midataframe <- as.data.frame(matriz1)
midataframe <- as.data.frame(matriz1)
midataframe <- as.data.frame(matriz1)
midataframe <- as.data.frame(matriz1)
matriz2 <- matrix (x, ncols=5)
matriz2 <- matrix (x, ncol=5)
matriz2 <- matrix(x, ncol=5)
matriz_de_letras <- matrix(sample(letters,20), ncol = 5)
matriz_de_letras
mi.data.frame <- as.data.frame(matriz_de_letras)
mi.data.frame
str(mi.data.frame)
mi.data.frame <- as.data.frame(matriz_de_letras, stringsAsFactors = F)
str(mi.data.frame)
mi.df.manual <- data.frame(1:22, LETTERS [1:22], sample(month.name,22, replace = T))
mi.df.manual
mi.df.manual
mi.df.manual <- data.frame(id = 1:22, segmento = LETTERS [1:22], mes = sample(month.name,22, replace = T))
mi.df.manual
mi.df.manual
mispacientes <- list(
nombre = list ("Pedro", "Alejandro","Maria")
apellido = list ("Perez Najera", "Gonzalez Azpeitia", "Jimenez Prado"),
mispacientes <- list(
nombre = list ("Pedro", "Alejandro","Maria"),
apellido = list ("Perez Najera", "Gonzalez Azpeitia", "Jimenez Prado"),
edad = list (23,45,12),
respuestas = list (
list (T,T,F,T),
list (F,F,F,T),
list (F,T,F,F)
)
)
mispacientes
mispacientes
mispacientes[1]
mispacientes$apellido
mispacientes[[1]]
mispacientes$nombre
mispacientes[1]
mispacientes$glucosa <- c(132,100,90)
mispacientes$glucosa <- c(132,100,90)
mispacientes
mispacientes[5]
mispacientes[[5]]
mispacientes$glucosa
str(mispacientes[5])
str(mispacientes[[5]])
str(mispacientes$glucosa)
mispacientes$glucosa[2]
mi.df.manual[,2]
#Si se pone sin coma, extraera columna, pero como data.frame
mi.df.manual[2]
mi.df.manual[2,]
#Si se pone sin coma, extraera columna, pero como data.frame
mi.df.manual[2]
str (mi.df.manual[1,])
mi.df.manual$id
mi.df.manual["id"]
mi.data.frame[,"id"]
mi.data.frame[,"id"]
mi.data.frame[,"id"]
mi.df.manual[,"id"]
mi.df.manual[3,"id"]
mi.df.manual[,"id"][3]
getwd()
getwd()
getwd()
setwd("/media/pinker/KINGSTON/tidytext")
getwd()
lineas3 <- read.csv('frec_respuestas_por_item/hombres/lineas2.csv')
lineas4 <- read.csv('frec_respuestas_por_item/mujeres/lineas2.csv')
#install.packages ("dplyr")
#install.packages("tidytext")
#install.packages("tidyr")
library(dplyr)
library(tidytext)
library(tidyr)
frequency_lines34 <- bind_rows(mutate(lineas3, author = "ninos"),
mutate(lineas4, author = "ninas")) %>%
#mutate(word = str_extract(word, "[a-z']+")) %>%
count(author, word) %>%
group_by(author) %>%
mutate(proportion = n / sum(n)) %>%
select(-n) %>%
spread(author, proportion) %>%
gather(author, proportion, `ninas`)
frequency_lines34
View(frequency_lines34)
write.csv(frequency_lines34,"frecuencias_a2_hm_prim.csv")
#install.packages("scales")
#install.packages("ggplot2")
library(scales)
library(ggplot2)
pdf("frecuencias_a2_hm_prim.csv.pdf")
ggplot(frequency_lines34, aes(x = proportion, y = `ninos`, color = abs(`ninos` - proportion))) +
geom_abline(color = "gray40", lty = 2) +
geom_jitter(alpha = 0.1, size = 2.5, width = 0.3, height = 0.3) +
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
scale_x_log10(labels = percent_format()) +
scale_y_log10(labels = percent_format()) +
scale_color_gradient(limits = c(0, 0.001), low = "darkslategray4", high = "gray75") +
facet_wrap(~author, ncol = 2) +
theme(legend.position="none") +
labs(y = "ninos", x = NULL)
dev.off()
getwd()
text <- c("Because I could not stop for Death -",
"He kindly stopped for me -",
"The Carriage held but just Ourselves -",
"and Immortality")
text
install.packages ("dplyr")
library(dplyr)
text_df <- data_frame(line = 1:4, text = text)
text_df
install.packages("tidytext")
library("tidytext")
text_df %>%
unnest_tokens(word, text)
#Argumento to_lower para evitar que se quiten las mayusculas
text_df %>%
unnest_tokens(word, text, to_lower = FALSE)
library(janeaustenr)
library(dplyr)
library(stringr)
original_books <- austen_books() %>%
group_by(book) %>%
mutate(linenumber = row_number(),
chapter = cumsum(str_detect(text, regex("^chapter [\\divxlc]",
ignore_case = TRUE)))) %>%
ungroup()
original_books
library(tidytext)
tidy_books <- original_books %>%
unnest_tokens(word, text)
tidy_books
#Funcion anti_join para quitar stop words (palabras irrelevantes)
data(stop_words)
tidy_books <- tidy_books %>%
anti_join(stop_words)
tidy_books
tidy_books %>%
count(word, sort = TRUE)
#desde aqui estuve moviendo en pinker
library(ggplot2)
tidy_books %>%
count(word, sort = TRUE) %>%
filter(n > 600) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n)) +
geom_col() +
xlab(NULL) +
coord_flip()
#Con el paquete gutenberg vamos a poder acceder a una gran cantidad de textos literarios de dominio
#publico.
install.packages("gutenbergr")
library(gutenbergr)
#En estos ejemplos vamos  descartar obras clasicas de distintos autores (hgwells, hermanas bronte) para
#comparar frecuencias de palabras y graficar
#Obras de H.G Wells
hgwells <- gutenberg_download(c(35, 36, 5230, 159))
tidy_hgwells <- hgwells %>%
unnest_tokens(word, text) %>%
anti_join(stop_words)
tidy_hgwells
tidy_hgwells %>%
count(word, sort = TRUE)
#Obras de las hermanas Bronte
bronte <- gutenberg_download(c(1260, 768, 969, 9182, 767))
tidy_bronte <- bronte %>%
unnest_tokens(word, text) %>%
anti_join(stop_words)
tidy_bronte
tidy_bronte %>%
count(word, sort = TRUE)
library(tidyr)
frequency <- bind_rows(mutate(tidy_bronte, author = "BrontÃ« Sisters"),
mutate(tidy_hgwells, author = "H.G. Wells"),
mutate(tidy_books, author = "Jane Austen")) %>%
mutate(word = str_extract(word, "[a-z']+")) %>%
count(author, word) %>%
group_by(author) %>%
mutate(proportion = n / sum(n)) %>%
select(-n) %>%
spread(author, proportion) %>%
gather(author, proportion, `BrontÃ« Sisters`:`H.G. Wells`)
frequency
library(scales)
# expect a warning about rows with missing values being removed
# esperar una advertencia acerca de las filas con valores perdidos que se eliminan
ggplot(frequency, aes(x = proportion, y = `Jane Austen`, color = abs(`Jane Austen` - proportion))) +
geom_abline(color = "gray40", lty = 2) +
geom_jitter(alpha = 0.1, size = 2.5, width = 0.3, height = 0.3) +
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
scale_x_log10(labels = percent_format()) +
scale_y_log10(labels = percent_format()) +
scale_color_gradient(limits = c(0, 0.001), low = "darkslategray4", high = "gray75") +
facet_wrap(~author, ncol = 2) +
theme(legend.position="none") +
labs(y = "Jane Austen", x = NULL)
library(tidytext)
sentiments
get_sentiments("afinn")
get_sentiments("bing")
get_sentiments("nrc")
tidy_books <- austen_books() %>%
group_by(book) %>%
mutate(linenumber = row_number(),
chapter = cumsum(str_detect(text, regex("^chapter [\\divxlc]",
ignore_case = TRUE)))) %>%
ungroup() %>%
unnest_tokens(word, text)
tidy_books
tidy_books %>%
filter(book == "Emma") %>%
inner_join(nrc_joy) %>%
count(word, sort = TRUE)
nrc_joy <- get_sentiments("nrc") %>%
filter(sentiment == "joy")
tidy_books %>%
filter(book == "Emma") %>%
inner_join(nrc_joy) %>%
count(word, sort = TRUE)
jane_austen_sentiment <- tidy_books %>%
inner_join(get_sentiments("bing")) %>%
count(book, index = linenumber %/% 80, sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
library(tidyr)
jane_austen_sentiment <- tidy_books %>%
inner_join(get_sentiments("bing")) %>%
count(book, index = linenumber %/% 80, sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
jane_austen_sentiment
library(ggplot2)
ggplot(jane_austen_sentiment, aes(index, sentiment, fill = book)) +
geom_col(show.legend = FALSE) +
facet_wrap(~book, ncol = 2, scales = "free_x")
pride_prejudice <- tidy_books %>%
filter(book == "Pride & Prejudice")
pride_prejudice
afinn <- pride_prejudice %>%
inner_join(get_sentiments("afinn")) %>%
group_by(index = linenumber %/% 80) %>%
summarise(sentiment = sum(score)) %>%
mutate(method = "AFINN")
affin
afinn
bing_and_nrc <- bind_rows(pride_prejudice %>%
inner_join(get_sentiments("bing")) %>%
mutate(method = "Bing et al."),
pride_prejudice %>%
inner_join(get_sentiments("nrc") %>%
filter(sentiment %in% c("positive",
"negative"))) %>%
mutate(method = "NRC")) %>%
count(method, index = linenumber %/% 80, sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
bing_and_nrc
bind_rows(afinn,
bing_and_nrc) %>%
ggplot(aes(index, sentiment, fill = method)) +
geom_col(show.legend = FALSE) +
facet_wrap(~method, ncol = 1, scales = "free_y")
library(dplyr)
library("tidytext")
